package bot

import (
	"duty-bot/internal/domain/duty"
	"duty-bot/internal/domain/employee"
	"fmt"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleDutyCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /duty
func handleDutyCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, dutyService *duty.DutyService) {
	currentDuty, err := dutyService.GetCurrentDuty()
	if err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()))
		return
	}

	response := fmt.Sprintf("–°–µ–π—á–∞—Å –¥–µ–∂—É—Ä–∏—Ç: %s (—Å %s)", currentDuty.Name, currentDuty.WeekStart.Format("02.01.2006"))
	bot.Send(tgbotapi.NewMessage(message.Chat.ID, response))
}

// handleSetScheduleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /set_schedule
func handleSetScheduleCommand(bot *tgbotapi.BotAPI, update tgbotapi.Update, dutyService *duty.DutyService) {
	if update.Message == nil || update.Message.Chat.Type != "private" {
		return
	}

	args := strings.Fields(update.Message.Text)
	if len(args) != 3 {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–§–æ—Ä–º–∞—Ç: /set_schedule <–∏–º—è> <–¥–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD>"))
		return
	}

	name := args[1]
	weekStart := args[2]

	parsedWeekStart, err := time.Parse("2006-01-02", weekStart)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ YYYY-MM-DD"))
		return
	}

	if err := dutyService.SetDuty(name, parsedWeekStart); err != nil {
		bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()))
		return
	}

	bot.Send(tgbotapi.NewMessage(update.Message.Chat.ID, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"))
}

// handleRotateCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /rotate
func handleRotateCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, dutyService *duty.DutyService) {
	if err := dutyService.RotateDuty(); err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()))
		return
	}

	bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–î–µ–∂—É—Ä–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Ä–æ—Ç–∏—Ä–æ–≤–∞–Ω—ã!"))
}

// handleAddEmployeeCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /add_employee
func handleAddEmployeeCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, employeeService *employee.EmployeeService) {
	args := strings.Fields(message.Text)
	if len(args) != 2 {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–§–æ—Ä–º–∞—Ç: /add_employee <–∏–º—è>"))
		return
	}

	name := args[1]
	if err := employeeService.AddEmployee(name); err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()))
		return
	}

	bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!"))
}

// handleRemoveEmployeeCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /remove_employee
func handleRemoveEmployeeCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message, employeeService *employee.EmployeeService) {
	args := strings.Fields(message.Text)
	if len(args) != 2 {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–§–æ—Ä–º–∞—Ç: /remove_employee <–∏–º—è>"))
		return
	}

	name := args[1]
	if err := employeeService.RemoveEmployee(name); err != nil {
		bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–û—à–∏–±–∫–∞: "+err.Error()))
		return
	}

	bot.Send(tgbotapi.NewMessage(message.Chat.ID, "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É–¥–∞–ª—ë–Ω!"))
}

// handleChecksCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /checks
func handleChecksCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	today := time.Now().Format("02.01.2006")

	checklist := fmt.Sprintf(`–®–∞–±–ª–æ–Ω –ß–µ–∫-–ª–∏—Å—Ç–∞ –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –Ω–∞ %s

–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–µ–Ω–¥–∞ üíº
–û–ø–ª–∞—Ç–∞üí∏
 1) –û–ø–ª–∞—Ç–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ–π  ‚úÖ
 2) –û–ø–ª–∞—Ç–∞ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫–∞—Ä—Ç—ã  ‚úÖ
 3) –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π —Å 3DS v2 ‚ùå - MNT-1217
 4) –û–ø–ª–∞—Ç–∞ –°–ë–ü ‚úÖ

–ü—Ä–∏–≤—è–∑–∫–∞ –∫–∞—Ä—Ç üìå
 1) –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã ‚úÖ
 2) –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–∞—Ä—Ç—ã ‚úÖ

–ö–∞–ø—á–∞ üß©
 1) –ê–≤—Ç–æ–∫–∞–ø—á–∞ ‚úÖ
 2) –†—É—á–Ω–∞—è –∫–∞–ø—á–∞ ‚úÖ

–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏ üîÑ
 1) –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ ‚úÖ
 2) –†–µ–≤–µ—Ä—Å –ø–ª–∞—Ç–µ–∂–∞ ‚úÖ
 3) –í–æ–∑–≤—Ä–∞—Ç –ø–ª–∞—Ç–µ–∂–∞ ‚úÖ
`, today)

	msg := tgbotapi.NewMessage(message.Chat.ID, checklist)
	bot.Send(msg)
}

// handleHelpCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help
func handleHelpCommand(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	helpText := `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/duty - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ
/set_schedule <–∏–º—è> <–¥–∞—Ç–∞> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤
/rotate - –†–æ—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–µ–∂—É—Ä–Ω—ã—Ö
/add_employee <–∏–º—è> - –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
/remove_employee <–∏–º—è> - –£–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
/checks - –ü–æ–∫–∞–∑–∞—Ç—å —á–µ–∫-–ª–∏—Å—Ç
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ`

	msg := tgbotapi.NewMessage(message.Chat.ID, helpText)
	bot.Send(msg)
}
